trigger:
- kraken

name: 2.0.0$(Rev:.r)

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/pufferpanel/pufferpanel' # Path to the module's code
  version: $(Build.BuildNumber)

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    mkdir $(GOPATH)/build
    go version
  displayName: 'Set up the Go workspace'

- script: |
    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    dep version
  workingDirectory: '$(modulePath)'
  displayName: 'Download dep'

- script: |
    export GOOS=windows
    dep ensure -v
    go build -o $(GOPATH)/build/pufferpanel.exe -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=$(Build.SourceVersion) -X github.com/pufferpanel/pufferpanel/version.Version=$(version)" -v github.com/pufferpanel/pufferpanel
  workingDirectory: '$(modulePath)'
  displayName: 'Windows Build'

- script: |
    export GOOS=linux
    dep ensure -v
    rm -f *.syso
    go build -o $(GOPATH)/build/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=$(Build.SourceVersion) -X github.com/pufferpanel/pufferpanel/version.Version=$(version)" -v github.com/pufferpanel/pufferpanel
  workingDirectory: '$(modulePath)'
  displayName: 'Linux Build'

- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.4'
    addToPath: true

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(modulePath)/client'
  displayName: 'NPM install'

- task: Npm@1
  inputs:
    command: 'custom'
    customCommand: 'run build'
    workingDir: '$(modulePath)/client'
  displayName: 'NPM Build client files'

- script: |
    mkdir -p $(GOPATH)/build/client/dist
    cp -r client/dist/* $(GOPATH)/build/client/dist
    cp -r assets $(GOPATH)/build/assets
  workingDirectory: '$(modulePath)'
  displayName: 'Copy assets'

- script: |
    git clone https://github.com/PufferPanel/systemd
  displayName: 'Get supporting files'
  workingDirectory: '$(modulePath)'

- script: |
    gem install --no-ri --no-rdoc rake
    gem install --no-ri --no-rdoc fpm && fpm -v
    gem install --no-ri --no-rdoc package_cloud && package_cloud version
  displayName: 'Install gem deps'

- script: |
    fpm -s dir -t deb \
      --name pufferpanel -v $(version) \
      --maintainer dev@pufferpanel.com \
      --deb-user pufferpanel --deb-group pufferpanel \
      --deb-systemd servicefiles/systemd/pufferpanel \
      --before-install scripts/preinst.sh \
      --after-upgrade scripts/postupgrade.sh \
      --before-remove scripts/prerm.sh \
      --deb-after-purge scripts/purge.sh \
      $(GOPATH)/build/pufferpanel=/usr/sbin/pufferpanel \
      $(GOPATH)/client/dist=/var/www/pufferpanel/client/dist/

    mkdir $(GOPATH)/build/xenial
    mv *.deb $(GOPATH)/build/xenial
  displayName: 'Create packages'
  workingDirectory: '$(modulePath)/systemd/pufferpanel/xenial'

- script: |
    fpm -s deb -t rpm \
      --name pufferpanel \
      --maintainer dev@pufferpanel.com \
      --rpm-user pufferpanel --rpm-group pufferpanel \
      --before-install scripts/preinst.sh \
      --after-upgrade scripts/postupgrade.sh \
      --before-remove scripts/prerm.sh \
      $(GOPATH)/build/xenial/pufferpanel_*_amd64.deb

    mkdir $(GOPATH)/build/rpm
    mv *.rpm $(GOPATH)/build/rpm
  displayName: 'Create packages'
  workingDirectory: '$(modulePath)/systemd/pufferpanel/rpm7'

- script: |
    fpm -s dir -t deb \
      --name pufferpanel -v $(version) \
      --maintainer dev@pufferpanel.com \
      --deb-user pufferpanel --deb-group pufferpanel \
      --deb-init servicefiles/initd/pufferpanel \
      --before-install scripts/preinst.sh \
      --before-remove scripts/prerm.sh \
      --deb-after-purge scripts/purge.sh \
      $(GOPATH)/build/pufferpanel=/usr/sbin/pufferpanel \
      $(GOPATH)/client/dist=/var/www/pufferpanel/client/dist/

    mkdir $(GOPATH)/build/trusty
    mv *.deb $(GOPATH)/build/trusty
  displayName: 'Create packages'
  workingDirectory: '$(modulePath)/systemd/pufferpanel/trusty'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'pufferpanel'
    targetPath: '$(GOPATH)/build/.'
