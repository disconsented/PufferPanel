trigger:
- kraken

name: 2.0.0$(Rev:.r)

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  version: $(Build.BuildNumber)

steps:
  - script: |
      mkdir /build
      echo {} > /build/config.json
      go version
      sudo apt-get update
      sudo apt-get install gcc-arm-linux-gnueabihf
    displayName: 'Set up the Go workspace'

  - script: |
      export GOOS=windows
      export GOARCH=amd64
      export CGO_ENABLED=1
      go build -o /build/pufferpanel.exe -ldflags "-X github.com/pufferpanel/pufferpanel.Hash=$(Build.SourceVersion) -X github.com/pufferpanel/pufferpanel.Version=$(version)" -v github.com/pufferpanel/pufferpanel/cmd
    displayName: 'Windows Build'

  - script: |
      export GOOS=linux
      export GOARCH=amd64
      export CGO_ENABLED=1
      go build -o /build/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel.Hash=$(Build.SourceVersion) -X github.com/pufferpanel/pufferpanel.Version=$(version)" -v github.com/pufferpanel/pufferpanel/cmd
    displayName: 'Linux Build'

  - script: |
      export GOOS=linux
      export GOARCH=arm
      export CC=arm-linux-gnueabihf-gcc
      export CXX=arm-linux-gnueabihf-g++
      export CGO_ENABLED=1 
      export GOARM=7
      go build -o /build/pufferpanel-arm -ldflags "-X github.com/pufferpanel/pufferpanel.Hash=$(Build.SourceVersion) -X github.com/pufferpanel/pufferpanel.Version=$(version)" -v github.com/pufferpanel/pufferpanel/cmd
    displayName: 'Linux Build - ARM'

  - task: UseRubyVersion@0
    inputs:
      versionSpec: '>= 2.4'
      addToPath: true
    displayName: 'Install Ruby'

  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: 'client'
    displayName: 'Install NPM'

  - task: Npm@1
    inputs:
      command: 'custom'
      customCommand: 'run build'
      workingDir: 'client'
    displayName: 'NPM Build client files'

  - script: |
      mkdir -p /build/client/dist
      cp -r client/dist/* /build/client/dist
      cp -r assets /build/assets
    displayName: 'Copy assets'

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'pufferpanel/pufferpanel'
      command: 'buildAndPush'
      Dockerfile: '.azure/Dockerfile'
      buildContext: '/build'
      tags: 'kraken'

  - script: |
      git clone https://github.com/PufferPanel/systemd
    displayName: 'Get supporting files'

  - script: |
      gem install --no-doc rake
      gem install --no-doc fpm && fpm -v
      gem install --no-doc package_cloud && package_cloud version
    displayName: 'Install gem deps'

  - script: |
      fpm -s dir -t deb \
        --name pufferpanel -v $(version) \
        --maintainer dev@pufferpanel.com \
        --deb-user pufferpanel --deb-group pufferpanel \
        --deb-systemd servicefiles/systemd/pufferpanel \
        --before-install scripts/preinst.sh \
        --after-upgrade scripts/postupgrade.sh \
        --before-remove scripts/prerm.sh \
        --deb-after-purge scripts/purge.sh \
        /build/pufferpanel=/usr/sbin/pufferpanel \
        /build/client/dist=/var/www/pufferpanel/client/dist/ \
        /build/config.json=/etc/pufferpanel/config.json

      mkdir /build/xenial
      mv *.deb /build/xenial
    displayName: 'Create packages - xenial'
    workingDirectory: 'systemd/pufferpanel/xenial'

  - script: |
      fpm -s deb -t rpm \
        --name pufferpanel \
        --maintainer dev@pufferpanel.com \
        --rpm-user pufferpanel --rpm-group pufferpanel \
        --before-install scripts/preinst.sh \
        --after-upgrade scripts/postupgrade.sh \
        --before-remove scripts/prerm.sh \
        /build/xenial/pufferpanel_*_amd64.deb

      mkdir /build/rpm
      mv *.rpm /build/rpm
    displayName: 'Create packages - rpm'
    workingDirectory: 'systemd/pufferpanel/rpm7'

  - script: |
      fpm -s dir -t deb \
        --name pufferpanel -v $(version) \
        --maintainer dev@pufferpanel.com \
        --deb-user pufferpanel --deb-group pufferpanel \
        --deb-init servicefiles/initd/pufferpanel \
        --before-install scripts/preinst.sh \
        --before-remove scripts/prerm.sh \
        --deb-after-purge scripts/purge.sh \
        /build/pufferpanel=/usr/sbin/pufferpanel \
        /build/client/dist=/var/www/pufferpanel/client/dist/ \
        /build/config.json=/etc/pufferpanel/config.json

      mkdir /build/trusty
      mv *.deb /build/trusty
    displayName: 'Create packages - trusty'
    workingDirectory: 'systemd/pufferpanel/trusty'

  - script: |
      fpm -s dir -t deb \
        --name pufferpanel -v $(version) \
        --maintainer dev@pufferpanel.com \
        --deb-user pufferpanel --deb-group pufferpanel \
        --deb-systemd servicefiles/systemd/pufferpanel \
        --before-install scripts/preinst.sh \
        --after-upgrade scripts/postupgrade.sh \
        --before-remove scripts/prerm.sh \
        --deb-after-purge scripts/purge.sh \
        -a armhf \
        /build/pufferpanel-arm=/usr/sbin/pufferpanel \
        /build/client/dist=/var/www/pufferpanel/client/dist/ \
        /build/config.json=/etc/pufferpanel/config.json

      mkdir /build/buster-arm
      mv *.deb /build/buster-arm
    displayName: 'Create packages - buster'
    workingDirectory: 'systemd/pufferpanel/xenial'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'pufferpanel'
      targetPath: '/build/.'
    displayName: 'Publish'