definitions:
  daemon.PufferdRunning:
    properties:
      message:
        type: string
    type: object
  daemon.ServerData:
    properties:
      data:
        type: object
    type: object
  daemon.ServerDataAdmin:
    properties:
      data:
        type: object
      display:
        type: string
      environment:
        type: object
      id:
        type: string
      install:
        items:
          type: '&{%!s(token.Pos=819) %!s(*ast.FieldList=&{828 [] 829}) %!s(bool=false)}'
        type: array
      run:
        $ref: '#/definitions/shared.Execution'
        type: object
      type:
        type: string
      uninstall:
        items:
          type: '&{%!s(token.Pos=882) %!s(*ast.FieldList=&{891 [] 892}) %!s(bool=false)}'
        type: array
    type: object
  daemon.ServerIdResponse:
    properties:
      id:
        type: string
    type: object
  daemon.ServerLogs:
    properties:
      epoch:
        type: integer
      logs:
        type: string
    type: object
  daemon.ServerRunning:
    properties:
      running:
        type: boolean
    type: object
  daemon.ServerStats:
    properties:
      cpu:
        type: number
      memory:
        type: number
    type: object
  messages.FileDesc:
    properties:
      extension:
        type: string
      isFile:
        type: boolean
      modifyTime:
        type: integer
      name:
        type: string
      size:
        type: integer
    type: object
  models.NodeView:
    properties:
      id:
        type: integer
      name:
        type: string
      privateHost:
        type: string
      privatePort:
        type: integer
      publicHost:
        type: string
      publicPort:
        type: integer
      sftpPort:
        type: integer
    type: object
  models.NodesView:
    items:
      properties:
        id:
          type: integer
        name:
          type: string
        privateHost:
          type: string
        privatePort:
          type: integer
        publicHost:
          type: string
        publicPort:
          type: integer
        sftpPort:
          type: integer
      type: object
    type: array
  models.Template:
    properties:
      data:
        type: object
      display:
        type: string
      environment:
        type: object
      id:
        type: string
      install:
        items:
          type: '&{%!s(token.Pos=819) %!s(*ast.FieldList=&{828 [] 829}) %!s(bool=false)}'
        type: array
      name:
        type: string
      readme:
        type: string
      run:
        $ref: '#/definitions/shared.Execution'
        type: object
      supportedEnvironments:
        items:
          type: '&{%!s(token.Pos=2565) %!s(*ast.FieldList=&{2574 [] 2575}) %!s(bool=false)}'
        type: array
      type:
        type: string
      uninstall:
        items:
          type: '&{%!s(token.Pos=882) %!s(*ast.FieldList=&{891 [] 892}) %!s(bool=false)}'
        type: array
    type: object
  models.Templates:
    items:
      properties:
        data:
          type: object
        display:
          type: string
        environment:
          type: object
        id:
          type: string
        install:
          items:
            type: '&{%!s(token.Pos=819) %!s(*ast.FieldList=&{828 [] 829}) %!s(bool=false)}'
          type: array
        name:
          type: string
        readme:
          type: string
        run:
          $ref: '#/definitions/shared.Execution'
          type: object
        supportedEnvironments:
          items:
            type: '&{%!s(token.Pos=2565) %!s(*ast.FieldList=&{2574 [] 2575}) %!s(bool=false)}'
          type: array
        type:
          type: string
        uninstall:
          items:
            type: '&{%!s(token.Pos=882) %!s(*ast.FieldList=&{891 [] 892}) %!s(bool=false)}'
          type: array
      type: object
    type: array
  response.Empty:
    type: object
  response.Error:
    properties:
      error:
        $ref: '#/definitions/shared.Error'
        type: object
    type: object
  shared.Error:
    properties:
      code:
        type: string
      metadata:
        type: object
      msg:
        type: string
    type: object
  shared.Execution:
    properties:
      arguments:
        items:
          type: string
        type: array
      autorecover:
        type: boolean
      autorestart:
        type: boolean
      autostart:
        type: boolean
      disabled:
        type: boolean
      environmentVars:
        type: object
      post:
        items:
          type: '&{%!s(token.Pos=2317) %!s(*ast.FieldList=&{2326 [] 2327}) %!s(bool=false)}'
        type: array
      pre:
        items:
          type: '&{%!s(token.Pos=2251) %!s(*ast.FieldList=&{2260 [] 2261}) %!s(bool=false)}'
        type: array
      program:
        type: string
      stop:
        type: string
      stopCode:
        type: integer
    type: object
  shared.Server:
    properties:
      data:
        type: object
      display:
        type: string
      environment:
        type: object
      id:
        type: string
      install:
        items:
          type: '&{%!s(token.Pos=819) %!s(*ast.FieldList=&{828 [] 829}) %!s(bool=false)}'
        type: array
      run:
        $ref: '#/definitions/shared.Execution'
        type: object
      type:
        type: string
      uninstall:
        items:
          type: '&{%!s(token.Pos=882) %!s(*ast.FieldList=&{891 [] 892}) %!s(bool=false)}'
        type: array
    type: object
info:
  contact:
    name: PufferPanel
    url: https://pufferpanel.com
  description: PufferPanel web interface
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: PufferPanel API
  version: "2.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Easy way to tell if the daemon is running is by using this endpoint
      produces:
      - application/json
      responses:
        "200":
          description: Service running
          schema:
            $ref: '#/definitions/daemon.PufferdRunning'
      summary: Is daemon up
    head:
      consumes:
      - application/json
      description: Easy way to tell if the daemon is running is by using this endpoint
      produces:
      - application/json
      responses:
        "204":
          description: Service running
          schema:
            $ref: '#/definitions/response.Empty'
      summary: Is daemon up
  /nodes:
    get:
      consumes:
      - application/json
      description: Gets all nodes registered to the panel
      produces:
      - application/json
      responses:
        "200":
          description: Nodes
          schema:
            $ref: '#/definitions/models.NodesView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Get nodes
    post:
      consumes:
      - application/json
      description: Creates a node
      parameters:
      - description: Node Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Node created
          schema:
            $ref: '#/definitions/models.NodeView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Create node
  /nodes/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the node
      parameters:
      - description: Node Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Deletes a node
    get:
      consumes:
      - application/json
      description: Gets information about a single node
      produces:
      - application/json
      responses:
        "200":
          description: Nods
          schema:
            $ref: '#/definitions/models.NodeView'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Get node
    put:
      consumes:
      - application/json
      description: Updates a node with given information
      parameters:
      - description: Node Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Update node
  /server/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the given server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Server deleted
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Deletes server
    get:
      consumes:
      - application/json
      description: Gets the given server data from an admin's view
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data for this server
          schema:
            $ref: '#/definitions/daemon.ServerDataAdmin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Gets server data as admin
    post:
      consumes:
      - application/json
      description: Edits the given server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Server data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/daemon.ServerData'
      produces:
      - application/json
      responses:
        "204":
          description: Server edited
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Edit server data as admin
    put:
      consumes:
      - application/json
      description: Creates the server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Server to create
        in: body
        name: server
        required: true
        schema:
          $ref: '#/definitions/shared.Server'
      produces:
      - application/json
      responses:
        "200":
          description: Server created
          schema:
            $ref: '#/definitions/daemon.ServerIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Create server
  /server/{id}/{filename}:
    delete:
      consumes:
      - application/json
      description: Deletes a file from the server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: If file was deleted
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Delete file
    get:
      consumes:
      - application/json
      description: Gets a file or a file list from the server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/json
      - application/octet-stream
      responses:
        "200":
          description: File List
          schema:
            $ref: '#/definitions/messages.FileDesc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Get file/list
    put:
      consumes:
      - application/json
      description: Puts a file or folder on the server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: File name
        in: path
        name: filename
        required: true
        type: string
      - description: If this is a folder
        in: path
        name: folder
        required: true
        type: boolean
      - description: File to place
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: If file/folder was created
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Put file/folder
  /server/{id}/console:
    post:
      consumes:
      - application/json
      description: Runs a command in the server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Command to run
        in: body
        name: commands
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: If command was ran
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Run command
  /server/{id}/data:
    get:
      consumes:
      - application/json
      description: Gets the given server data
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Data for this server
          schema:
            $ref: '#/definitions/daemon.ServerData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Gets server data
    post:
      consumes:
      - application/json
      description: Edits the given server data
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Server data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/daemon.ServerData'
      produces:
      - application/json
      responses:
        "204":
          description: Server edited
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Edit server data
  /server/{id}/install:
    post:
      consumes:
      - application/json
      description: installs the given server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Wait for the operation to complete
        in: query
        name: wait
        type: boolean
      produces:
      - application/json
      responses:
        "202":
          description: Install has been queued
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Installs server
  /server/{id}/logs:
    get:
      consumes:
      - application/json
      description: Gets the given server logs since a certain time period
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logs for this server
          schema:
            $ref: '#/definitions/daemon.ServerLogs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Gets server logs
  /server/{id}/reload:
    post:
      consumes:
      - application/json
      description: Reloads the server from disk
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Reloaded server
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Reload server
  /server/{id}/start:
    post:
      consumes:
      - application/json
      description: Starts the given server
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      - description: Wait for the operation to complete
        in: query
        name: wait
        type: boolean
      produces:
      - application/json
      responses:
        "202":
          description: Start has been queued
          schema:
            $ref: '#/definitions/response.Empty'
        "204":
          description: Server started
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Starts server
  /server/{id}/stats:
    get:
      consumes:
      - application/json
      description: Gets the given server stats
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Stats for this server
          schema:
            $ref: '#/definitions/daemon.ServerStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Gets server stats
  /server/{id}/status:
    get:
      consumes:
      - application/json
      description: Gets the given server status
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/daemon.ServerRunning'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Gets server status
  /server/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stops the given server forcefully
      parameters:
      - description: Server Identifier
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Server killed
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Empty'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Kill server
  /templates:
    get:
      consumes:
      - application/json
      description: Gets all templates registered
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Templates'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Get templates
swagger: "2.0"
