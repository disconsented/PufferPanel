name: Build
on: 
  push:
    branches:
    - kraken
    tags:
    - v2.*
    paths:
    - '**'
    - '!.github/**'
    
jobs:              
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-18.04
    
    strategy:
      matrix:
        os: [ linux, windows ]
        arch: [ amd64, arm ]
        go: [ '1.13' ]
        exclude:
          - os: windows
            arch: arm

    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}

    steps:
    - name: Get the version
      run: echo "::set-env name=VERSION::${GITHUB_REF/refs\/tags\//}"
    
    - name: Get the version
      if: startsWith(env.VERSION, 'refs/')
      run: echo "::set-env name=VERSION::${GITHUB_REF/refs\/heads\//}"
      
    - name: Version
      run: |
        echo $VERSION
        echo $GITHUB_REF      

    - name: Set up Go ${{ matrix.go }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
      with:
        path: pufferpanel
        
    - name: Build
      if: startsWith(matrix.os, 'linux')
      run: |
        go build -o pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd

    - name: Build
      if: startsWith(matrix.os, 'windows')
      run: |
        go build -o pufferpanel.exe -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd

    - name: Publish Binary
      uses: actions/upload-artifact@v1
      if: startsWith(matrix.os, 'linux') && startsWith(github.ref, 'refs/tags/v2.')
      with:
        name: ${{ matrix.os }} ${{ matrix.arch }} - Binary
        path: pufferpanel

    - name: Publish Binary
      uses: actions/upload-artifact@v1
      if: startsWith(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v2.')
      with:
        name: ${{ matrix.os }} ${{ matrix.arch }} - Binary
        path: pufferpanel.exe

  produce-webartifacts:
    name: Generate web artifacts
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        node-version: [ '12.x' ]

    steps:
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: npm install, build
        run: |
          npm install
          npm run build
        env:
          CI: true
        working-directory: client

      - name: Publish Supporting
        uses: actions/upload-artifact@v1
        if: startsWith(github.ref, 'refs/tags/v2.')
        with:
          name: Web Artifacts
          path: client/dist

  produce-release:
    name: Generate packages artifacts
    runs-on: ubuntu-18.04
    needs: [produce-webartifacts,build-binaries]
    if: startsWith(github.ref, 'refs/tags/v2.')
        
    steps:
      - name: Get the version
        run: echo "::set-env name=VERSION::${GITHUB_REF/refs\/tags\//}"
    
      - name: Get the version
        if: startsWith(env.VERSION, 'refs/')
        run: echo "::set-env name=VERSION::${GITHUB_REF/refs\/heads\//}"      
      
      - uses: actions/setup-ruby@v1
        
      - name: Install gems
        run: |
          gem install --no-doc rake
          gem install --no-doc fpm && fpm -v
          gem install --no-doc package_cloud && package_cloud version
          
      - name: Pull deps
        uses: actions/checkout@v1
        with:
          repository: pufferpanel/systemd
          path: systemd
          ref: master

      - name: Pull main repo
        uses: actions/checkout@v1
        with:
          path: pufferpanel
          
      - name: Pull files
        uses: actions/download-artifact@v1
        with:
          name: linux amd64 - Binary
          path: binaries/amd64 

      - name: Pull files
        uses: actions/download-artifact@v1
        with:
          name: windows amd64 - Binary
          path: binaries/amd64 
          
      - name: Pull files
        uses: actions/download-artifact@v1
        with:
          name: linux arm - Binary
          path: binaries/arm 
        
      - name: Pull files
        uses: actions/download-artifact@v1
        with:
          name: Web Artifacts
          path: client/dist
          
      - name: Build packages
        run: |
          fpm -s dir -t deb \
          --name pufferpanel -v ${{ env.VERSION }} \
          --maintainer dev@pufferpanel.com \
          --deb-user pufferpanel --deb-group pufferpanel \
          --deb-systemd ../systemd/pufferpanel/xenial/servicefiles/systemd/pufferpanel \
          --before-install ../systemd/pufferpanel/xenial/scripts/preinst.sh \
          --after-upgrade ../systemd/pufferpanel/xenial/scripts/postupgrade.sh \
          --before-remove ../systemd/pufferpanel/xenial/scripts/prerm.sh \
          --deb-after-purge ../systemd/pufferpanel/xenial/scripts/purge.sh \
          binaries/amd64/pufferpanel=/usr/sbin/pufferpanel \
          client/dist=/var/www/pufferpanel/ \
          ../pufferpanel/assets/email=/etc/pufferpanel/email \
          ../pufferpanel/config.linux.json=/etc/pufferpanel/config.json
          
          mkdir -p build/deb
          mv *.deb build/deb

          fpm -s deb -t rpm \
          --name pufferpanel \
          --maintainer dev@pufferpanel.com \
          --rpm-user pufferpanel --rpm-group pufferpanel \
          --before-install ../systemd/pufferpanel/rpm7/scripts/preinst.sh \
          --after-upgrade ../systemd/pufferpanel/rpm7/scripts/postupgrade.sh \
          --before-remove ../systemd/pufferpanel/rpm7/scripts/prerm.sh \
          build/deb/pufferpanel_*_amd64.deb

          mkdir -p build/rpm
          mv *.rpm build/rpm
          
      - name: Create archives
        run: |
          mkdir -p archives/amd64
          cp binaries/amd64/pufferpanel archives/amd64/
          cp binaries/amd64/pufferpanel.exe archives/amd64/
          cp -r client/dist archives/amd64/www
          cp -r pufferpanel/assets/email archives/amd64/
          
          mkdir -p archives/amd64
          cp binaries/arm/pufferpanel archives/arm/
          cp -r client/dist archives/arm/www
          cp -r pufferpanel/assets/email archives/arm/
          
          cd archives/amd64
          zip ../pufferpanel_${{ env.VERSION}}_amd64.zip pufferpanel pufferpanel.exe www email
          
          cd ../arm
          zip ../pufferpanel_${{ env.VERSION}}_arm.zip pufferpanel www email

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: true
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: archive/pufferpanel-${{ env.VERSION}}_amd64.zip
          asset_name: pufferpanel-${{ env.VERSION}}_amd64.zip
          asset_content_type: application/zip 

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/deb/pufferpanel_${{ env.VERSION}}_amd64.deb
          asset_name: pufferpanel_${{ env.VERSION}}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/rpm/pufferpanel-${{ env.VERSION}}-1.x86_64.rpm
          asset_name: pufferpanel-${{ env.VERSION}}-1.x86_64.rpm
          asset_content_type: application/zip
