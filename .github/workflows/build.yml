name: Build
on:
  push:
    branches:
    - master
    tags:
    - v2.*
    paths-ignore:
      - '.github/workflows/release.yml'
  pull_request:

jobs:
  skip-build:
    runs-on: ubuntu-18.04
    if: "!startsWith(github.ref, 'refs/tags/v') && contains(github.event.head_commit.message, '[skip]') || startsWith(github.head_ref, 'l10n_master')"
    name: "Build skipped"

    steps:
      - name: Skipping
        run: echo "Skipping build"

  build-shared:
    name: Build Shared Objects
    runs-on: ubuntu-18.04
    if: "startsWith(github.ref, 'refs/tags/v') || !(contains(github.event.head_commit.message, '[skip]') || startsWith(github.head_ref, 'l10n_master'))"

    steps:
    - name: Set up Node 14
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
      with:
        path: pufferpanel
    
    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-nodemodules-14-${{ hashFiles('client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nodemodules-14
          
    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: client/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Download Go Binaries
      run: |
        wget https://github.com/swaggo/swag/releases/download/v1.6.7/swag_1.6.7_Linux_x86_64.tar.gz
        mkdir -p ~/go/bin
        tar -zxf swag*.tar.gz -C ~/go/bin
        rm -rf swag*.tar.gz

    - name: npm install, build
      run: |
        npm install
        npm run build
        rm -rf dist/*.map
        rm -rf node_modules
        rm -rf .git
        rm -rf client
      env:
        CI: true
      working-directory: client

    - name: Generate Swagger Docs
      run: |
        ~/go/bin/swag init -o web/swagger -g web/loader.go

    - name: Generate folders
      run: |
        mkdir -p build-artifacts/www
        mv client/dist/* build-artifacts/www
        mv assets/email build-artifacts       

    - name: Generate job artifact
      uses: actions/upload-artifact@v2
      with:
        name: pufferpanel_build_artifact
        path: .
        if-no-files-found: error

    - name: Upload Swagger docs
      uses: actions/upload-artifact@v2
      with:
        name: pufferpanel_swagger
        path: |
          web/swagger/swagger.json
          web/swagger/swagger.yaml
        if-no-files-found: error

  build-windows-amd64-binaries:
    name: Build Binaries - Windows AMD64
    runs-on: ubuntu-18.04
    needs: ['build-shared']

    steps:
    - name: Get the version
      run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6

    - uses: actions/download-artifact@v2
      with:
        name: pufferpanel_build_artifact
        
    - name: Restore APT cache
      id: aptcache
      uses: actions/cache@v2
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-windows
        
    - name: Download APT packages
      if: steps.aptcache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install --download-only -y gcc-mingw-w64
        
    - name: APT Install
      run: |
        sudo apt-get install -y gcc-mingw-w64

    - name: Build Windows
      run: |
        go build -o build-artifact/pufferpanel.exe -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: windows
        GOARCH: amd64
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        CGO_ENABLED: 1

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_windows_amd64.zip
        path: build-artifacts/

  build-linux-amd64-binaries:
    name: Build Binaries - Linux AMD64
    runs-on: ubuntu-18.04
    needs: ['build-shared']

    steps:
    - name: Get the version
      run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6

    - uses: actions/download-artifact@v2
      with:
        name: pufferpanel_build_artifact
        
    - name: Build Linux
      run: |
        go build -o build-artifacts/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: linux
        GOARCH: amd64
        
    - name: Set up build folder
      run: |
        mkdir -p DEBBUILD/usr/sbin DEBBUILD/var/www/pufferpanel DEBBUILD/var/lib/pufferpanel DEBBUILD/var/log/pufferpanel DEBBUILD/etc/pufferpanel DEBBUILD/lib/systemd/system/
        cp config.linux.json DEBBUILD/etc/pufferpanel
        cp build-artifacts/pufferpanel DEBBUILD/usr/sbin/pufferpanel
        cp -r build-artifacts/www/* DEBBUILD/var/www/pufferpanel
        cp -r build-artifacts/email DEBBUILD/etc/pufferpanel
        cp systemd/servicefiles/pufferpanel.service DEBBUILD/lib/systemd/system/pufferpanel.service
        
    - name: Build Package DEB AMD64
      id: debamd64
      uses: pufferpanel/build-deb@master
      with:
          data-folder:  DEBBUILD
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: amd64
          maintainer: PufferPanel <dev@pufferpanel.com>
          homepage: https://pufferpanel.com
          description: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_linux_amd64.zip
        path: build-artifacts/

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_amd64.deb
        path: pufferpanel_${{ env.VERSION }}_amd64.deb
        
    #- name: Publish Artifacts
      #uses: actions/upload-artifact@v1
      #with:
        #name: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        #path: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm

  build-linux-armhf-binaries:
    name: Build Binaries - Linux ARMHF
    runs-on: ubuntu-18.04
    needs: ['build-shared']

    steps:
    - name: Get the version
      run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6

    - uses: actions/download-artifact@v2
      with:
        name: pufferpanel_build_artifact
        
    - name: Restore APT cache
      id: aptcache
      uses: actions/cache@v2
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-armhf
        
    - name: Download APT packages
      if: steps.aptcache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install --download-only -y gcc-7-arm-linux-gnueabi
        
    - name: APT Install
      run: |
        sudo apt-get install -y gcc-7-arm-linux-gnueabi

    - name: Build ARMHF
      run: |
        go build -o build-artifacts/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: linux
        GOARCH: arm
        GOARM: 7
        CC: arm-linux-gnueabi-gcc-7
        CGO_ENABLED: 1
        
    - name: Set up build folder
      run: |
        mkdir -p DEBBUILD/usr/sbin DEBBUILD/var/www/pufferpanel DEBBUILD/var/lib/pufferpanel DEBBUILD/var/log/pufferpanel DEBBUILD/etc/pufferpanel DEBBUILD/lib/systemd/system/
        cp config.linux.json DEBBUILD/etc/pufferpanel
        cp build-artifacts/pufferpanel DEBBUILD/usr/sbin/pufferpanel
        cp -r build-artifacts/www/* DEBBUILD/var/www/pufferpanel
        cp -r build-artifacts/email DEBBUILD/etc/pufferpanel
        cp systemd/servicefiles/pufferpanel.service DEBBUILD/lib/systemd/system/pufferpanel.service
          
    - name: Build Package DEB ARMHF
      id: debarmhf
      uses: pufferpanel/build-deb@master
      with:
          data-folder:  DEBBUILD
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: armhf
          maintainer: PufferPanel <dev@pufferpanel.com>
          homepage: https://pufferpanel.com
          description: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_linux_armhf.zip
        path: build-artifacts/

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_armhf.deb
        path: pufferpanel_${{ env.VERSION }}_armhf.deb

  build-linux-arm64-binaries:
    name: Build Binaries - Linux ARM64
    runs-on: ubuntu-18.04
    needs: ['build-shared']

    steps:
    - name: Get the version
      run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6

    - uses: actions/download-artifact@v2
      with:
        name: pufferpanel_build_artifact
        
    - name: Restore APT cache
      id: aptcache
      uses: actions/cache@v2
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-arm64
        
    - name: Download APT packages
      if: steps.aptcache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install --download-only -y gcc-aarch64-linux-gnu
        
    - name: APT Install
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Build ARM64
      run: |
        go build -o build-artifacts/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: linux
        GOARCH: arm64
        CC: aarch64-linux-gnu-gcc
        CGO_ENABLED: 1
        
    - name: Set up build folder
      run: |
        mkdir DEBBUILD
        mkdir -p DEBBUILD/usr/sbin DEBBUILD/var/www/pufferpanel DEBBUILD/var/lib/pufferpanel DEBBUILD/var/log/pufferpanel DEBBUILD/etc/pufferpanel DEBBUILD/lib/systemd/system/
        cp config.linux.json DEBBUILD/etc/pufferpanel
        cp build-artifacts/pufferpanel DEBBUILD/usr/sbin/pufferpanel
        cp -r build-artifacts/www/* DEBBUILD/var/www/pufferpanel
        cp -r build-artifacts/email DEBBUILD/etc/pufferpanel
        cp systemd/servicefiles/pufferpanel.service DEBBUILD/lib/systemd/system/pufferpanel.service
              
    - name: Build Package DEB ARM64
      id: debarm64
      uses: pufferpanel/build-deb@master
      with:
          data-folder:  DEBBUILD
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: arm64
          maintainer: PufferPanel <dev@pufferpanel.com>
          homepage: https://pufferpanel.com
          description: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel
        
    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_linux_arm64.zip
        path: build-artifacts

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_arm64.deb
        path: pufferpanel_${{ env.VERSION }}_arm64.deb

  delete-temp-artifact:
    name: Delete Temp Artifacts
    runs-on: ubuntu-18.04
    needs: ['build-linux-armhf-binaries', 'build-linux-arm64-binaries', 'build-linux-amd64-binaries', 'build-windows-amd64-binaries']
    
    steps:
    - name: Delete pufferpanel_artifact
      uses: pufferpanel/delete-artifact@master
      with:
          artifact-name: pufferpanel_artifact
